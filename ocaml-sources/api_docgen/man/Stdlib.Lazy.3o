.TH "Stdlib.Lazy" 3 2021-03-03 OCamldoc "OCaml library"
.SH NAME
Stdlib.Lazy \- no description
.SH Module
Module   Stdlib.Lazy
.SH Documentation
.sp
Module
.BI "Lazy"
 : 
.B (module Stdlib__Lazy)

.sp

.sp

.sp
.sp
.I type 
.B 'a
.I t 
= 
.B 'a CamlinternalLazy.t

.sp
A value of type 
.ft B
\&'a Lazy\&.t
.ft R
is a deferred computation, called
a suspension, that has a result of type 
.ft B
\&'a
.ft R
\&.  The special
expression syntax 
.ft B
lazy (expr)
.ft R
makes a suspension of the
computation of 
.ft B
expr
.ft R
, without computing 
.ft B
expr
.ft R
itself yet\&.
"Forcing" the suspension will then compute 
.ft B
expr
.ft R
and return its
result\&. Matching a suspension with the special pattern syntax
.ft B
lazy(pattern)
.ft R
also computes the underlying expression and
tries to bind it to 
.ft B
pattern
.ft R
:
.sp

.EX
.ft B
.br
\&    let lazy_option_map f x =
.br
\&    match x with
.br
\&    | lazy (Some x) \-> Some (Lazy\&.force f x)
.br
\&    | _ \-> None
.br
\&  
.ft R
.EE
.sp
Note: If lazy patterns appear in multiple cases in a pattern\-matching,
lazy expressions may be forced even outside of the case ultimately selected
by the pattern matching\&. In the example above, the suspension 
.ft B
x
.ft R
is always
computed\&.
.sp
Note: 
.ft B
lazy_t
.ft R
is the built\-in type constructor used by the compiler
for the 
.ft B
lazy
.ft R
keyword\&.  You should not use it directly\&.  Always use
.ft B
Lazy\&.t
.ft R
instead\&.
.sp
Note: 
.ft B
Lazy\&.force
.ft R
is not thread\-safe\&.  If you use this module in
a multi\-threaded program, you will need to add some locks\&.
.sp
Note: if the program is compiled with the 
.ft B
\-rectypes
.ft R
option,
ill\-founded recursive definitions of the form 
.ft B
let rec x = lazy x
.ft R
or 
.ft B
let rec x = lazy(lazy(\&.\&.\&.(lazy x)))
.ft R
are accepted by the type\-checker
and lead, when forced, to ill\-formed values that trigger infinite
loops in the garbage collector and other parts of the run\-time system\&.
Without the 
.ft B
\-rectypes
.ft R
option, such ill\-founded recursive definitions
are rejected by the type\-checker\&.

.sp

.I exception Undefined 

.sp

.sp

.I val force 
: 
.B 'a t -> 'a
.sp

.ft B
force x
.ft R
forces the suspension 
.ft B
x
.ft R
and returns its result\&.
If 
.ft B
x
.ft R
has already been forced, 
.ft B
Lazy\&.force x
.ft R
returns the
same value again without recomputing it\&.  If it raised an exception,
the same exception is raised again\&.

.sp
.B "Raises Undefined"
if the forcing of 
.ft B
x
.ft R
tries to force 
.ft B
x
.ft R
itself
recursively\&.

.sp

.I val force_val 
: 
.B 'a t -> 'a
.sp

.ft B
force_val x
.ft R
forces the suspension 
.ft B
x
.ft R
and returns its
result\&.  If 
.ft B
x
.ft R
has already been forced, 
.ft B
force_val x
.ft R
returns the same value again without recomputing it\&.
.sp
If the computation of 
.ft B
x
.ft R
raises an exception, it is unspecified
whether 
.ft B
force_val x
.ft R
raises the same exception or 
.ft B
Lazy\&.Undefined
.ft R
\&.

.sp
.B "Raises Undefined"
if the forcing of 
.ft B
x
.ft R
tries to force 
.ft B
x
.ft R
itself
recursively\&.

.sp

.I val from_fun 
: 
.B (unit -> 'a) -> 'a t
.sp

.ft B
from_fun f
.ft R
is the same as 
.ft B
lazy (f ())
.ft R
but slightly more efficient\&.
.sp

.ft B
from_fun
.ft R
should only be used if the function 
.ft B
f
.ft R
is already defined\&.
In particular it is always less efficient to write
.ft B
from_fun (fun () \-> expr)
.ft R
than 
.ft B
lazy expr
.ft R
\&.

.sp
.B "Since"
4.00.0

.sp

.I val from_val 
: 
.B 'a -> 'a t
.sp

.ft B
from_val v
.ft R
returns an already\-forced suspension of 
.ft B
v
.ft R
\&.
This is for special purposes only and should not be confused with
.ft B
lazy (v)
.ft R
\&.

.sp
.B "Since"
4.00.0

.sp

.I val is_val 
: 
.B 'a t -> bool
.sp

.ft B
is_val x
.ft R
returns 
.ft B
true
.ft R
if 
.ft B
x
.ft R
has already been forced and
did not raise an exception\&.

.sp
.B "Since"
4.00.0

.sp

.I val lazy_from_fun 
: 
.B (unit -> 'a) -> 'a t
.sp
.B "Deprecated."
synonym for 
.ft B
from_fun
.ft R
\&.

.sp

.I val lazy_from_val 
: 
.B 'a -> 'a t
.sp
.B "Deprecated."
synonym for 
.ft B
from_val
.ft R
\&.

.sp

.I val lazy_is_val 
: 
.B 'a t -> bool
.sp
.B "Deprecated."
synonym for 
.ft B
is_val
.ft R
\&.

.sp
